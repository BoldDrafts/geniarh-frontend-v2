openapi: 3.0.3
info:
  title: RAGFlow Requirements API
  description: API specification for managing recruitment requirements
  version: 1.0.0
  contact:
    name: RAGFlow Support
    email: support@ragflow.com

servers:
  - url: /api/v1
    description: Development server

components:
  schemas:
    Requirement:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          example: "Senior Frontend Developer"
        department:
          type: string
          example: "Engineering"
        priority:
          type: string
          enum: [High, Medium, Low]
          example: "High"
        timeframe:
          type: string
          enum: ["Immediate", "1-2 months", "3-6 months", "6+ months"]
          example: "1-2 months"
        experienceLevel:
          type: string
          enum: [Entry, Mid, Senior, Lead, Executive]
          example: "Senior"
        location:
          type: string
          example: "Remote"
        employmentType:
          type: string
          enum: ["Full-time", "Part-time", "Contract", "Internship"]
          example: "Full-time"
        salaryMin:
          type: number
          example: 100000
        salaryMax:
          type: number
          example: 150000
        salaryCurrency:
          type: string
          enum: [USD, EUR, GBP]
          example: "USD"
        skills:
          type: array
          items:
            type: string
          example: ["React", "TypeScript", "Node.js"]
        description:
          type: string
          example: "We are looking for an experienced Senior Frontend Developer..."
        qualifications:
          type: string
          example: "Bachelor's degree in Computer Science or related field..."
        status:
          type: string
          enum: [Active, Draft, Closed]
          example: "Active"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - title
        - department
        - priority
        - timeframe
        - experienceLevel
        - location
        - employmentType
        - salaryMin
        - salaryMax
        - salaryCurrency
        - skills
        - description
        - status

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundError:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ValidationError:
      description: The request parameters failed validation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

security:
  - BearerAuth: []

paths:
  /requirements:
    get:
      summary: List all requirements
      description: Retrieve a list of recruitment requirements
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [Active, Draft, Closed]
          description: Filter requirements by status
        - in: query
          name: department
          schema:
            type: string
          description: Filter requirements by department
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
      responses:
        '200':
          description: A list of requirements
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Requirement'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      pages:
                        type: integer
                      current:
                        type: integer
                      limit:
                        type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      summary: Create a new requirement
      description: Create a new recruitment requirement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Requirement'
      responses:
        '201':
          description: Requirement created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requirement'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /requirements/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Requirement ID
    
    get:
      summary: Get a requirement by ID
      description: Retrieve detailed information about a specific requirement
      responses:
        '200':
          description: Requirement details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requirement'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      summary: Update a requirement
      description: Update an existing requirement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Requirement'
      responses:
        '200':
          description: Requirement updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requirement'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      summary: Delete a requirement
      description: Delete an existing requirement
      responses:
        '204':
          description: Requirement deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /requirements/{id}/status:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Requirement ID
    
    patch:
      summary: Update requirement status
      description: Update the status of an existing requirement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [Active, Draft, Closed]
              required:
                - status
      responses:
        '200':
          description: Status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requirement'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'